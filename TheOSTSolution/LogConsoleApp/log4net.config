<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!--如果不用App.config作配置文件，则configSections节不是必须的。-->
  <configSections>
    <!--“type”属性的完整格式为：配置节处理器类名,程序集名称,Version=程序集版本号,Culture=区域信息,PublicKeyToken=公钥-->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />
  </configSections>
  <log4net>
    <!--所有logger的基，root的设置在所有logger中都起作用。
    当在root和logger中重复设定相同的appender时，你会发现同一日志信息将被记录两次。-->
    <root>
      <!--level: OFF>FATAL>ERROR>WARN>INFO>DEBUG>ALL 缺省值为DEBUG-->
      <level value="ALL"/>
      <appender-ref ref="RollingFileAppender" />
      <appender-ref ref="ConsoleAppender" />
    </root>
    <!--日志记录器logger，可以有多个。
    子日志对象会继承父日志对象的Appender列表。
    这种缺省的行为方式也可以通过显式地设定<logger>标签的additivity属性为false而改变。-->
    <!--<logger name="AppLogger" additivity="false">-->
    <logger name="FileLogger">
      <!--logger对象中的设置会覆盖根日志的设置-->
      <level value="INFO" />
      <appender-ref ref="RollingFileAppender" />
    </logger>
    <logger name="ConsoleLogger">
      <!--logger对象中的设置会覆盖根日志的设置-->
      <level value="INFO" />
      <appender-ref ref="ConsoleAppender" />
    </logger>
    <!--一个appender可以由多个logger共用，当然一个logger可以指定多个appender。-->
    <!--<appender name="LogFileAppender" type="log4net.Appender.FileAppender">
      <param name="File" value="log-file.log"/>
      <param name="AppendToFile" value="true"/>-->
      <!-- 切割最多文件数 -1表示不限制产生日志文件数-->
      <!--<param name="MaxSizeRollBackups" value="-1"/>-->
      <!-- 每个文件的大小限制  -->
      <!--<param name="MaximumFileSize" value="10MB"/>
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%d [%t] %-5p %c [%x] %X{auth} - %m%n" />
      </layout>
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="ALL" />
        <param name="LevelMax" value="FATAL" />
      </filter>
    </appender>-->
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="logs/log-" />
      <!--是否续写-->
      <appendToFile value="true" />
      <!-- RollingStyle Composite 综合  Size 按大小  Date 按时间 -->
      <rollingStyle value="Composite" />
      <maxSizeRollBackups value="-1" />
      <maximumFileSize value="2MB" />
      <datePattern value="yyyy/yyyyMM/yyyyMMdd/yyyyMMdd-HH'.log'" />
      <staticLogFileName value="false"/>
      <encoding value="utf-8"/>
      <layout type="log4net.Layout.PatternLayout">
        <!--<conversionPattern value="%d [%t] %-5p %logger [%p{NDC}] - %m%n" />-->
        <!--<param name="ConversionPattern" value="记录时间：%date 线程ID:[%thread] 日志级别：%-5level 记录类：%logger 操作者ID：%property{Operator} 操作类型：%property{Action}%n 当前机器名:%property%n当前机器名及登录用户：%username %n 记录位置：%location%n 消息描述：%property{Message}%n 异常：%exception%n 消息：%message%newline%n%n" />-->
        <param name="ConversionPattern" value="%date [%thread] %-5level %message%n" />
      </layout>
    </appender>
    <!--<appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="logfile" />
      <appendToFile value="true" />
      <rollingStyle value="Composite" />
      <datePattern value="yyyyMMdd" />
      <maxSizeRollBackups value="10" />
      <maximumFileSize value="1MB" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
      </layout>
    </appender>-->
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender" >
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%d [%t] %-5p %c [%x] - %m%n" />
      </layout>
    </appender>
  </log4net>
  <!--private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);-->
</configuration>
<!--
%m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息 
%n(new line):换行 
%d(datetime):输出当前语句运行的时刻 
%r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数 
%t(thread id):当前语句所在的线程ID 
%p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等 
%c(class):当前日志对象的名称
%L：输出语句所在的行号
%F：输出语句所在的文件名
%-数字：表示该项的最小长度，如果不够，则用空格填充
-->